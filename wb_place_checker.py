import sys

from aiogram.utils.markdown import text
sys.path.append("c:\\Users\\xcraz\\.vscode\\TgBots")
import asyncio
import traceback
from urllib.parse import unquote
from datetime import datetime
import json
from loader import bot
from multiprocessing import Pool
from reply_texts import WBCON_WB_PLACE_LINK
from time import sleep
import logging
import sys
from MySQL import SQL

async def main():
    while True:
        logging.basicConfig(level=logging.INFO, filename="Logs/checker.log", filemode="a",
                        format="%(levelname)s:%(asctime)s:%(message)s")
        SQL().__exit__()
        data = SQL().get_wb_place_user_request()
        for user_id, task_id, geo, category, article, time_added  in data:
            delta = datetime.now() - time_added
            if delta.total_seconds() > 5:
                try:
                    data = SQL().GET_WB_PLACE_REQUEST(user_id, task_id)

                    status_message = data["message"]
                    data = json.loads(data["data"])
                    if status_message == "Error":
                        raise Exception
                    if data["position"] == "-1":
                        raise KeyError
                    if category.startswith("http"):
                        category_print = category
                    else:
                        category_print = unquote(category)
                    print(category_print)
                    cities_dict = {"moscow": "–ú–æ—Å–∫–≤–∞", "spb": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "kazan": "–ö–∞–∑–∞–Ω—å", "khbr": "–•–∞–±–∞—Ä–æ–≤—Å–∫", "krasnodar": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "novosib": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"}        
                    text_to_send = f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –ø–æ–∏—Å–∫—É –º–µ—Å—Ç–∞ –∞—Ä—Ç–∏–∫—É–ª–∞: <b>{article}</b>\n–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{category_print}</b>\n"
                    text_to_send += f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{cities_dict[geo]}</b>\n"
                    text_to_send += f"–ú–µ—Å—Ç–æ —Ç–æ–≤–∞—Ä–∞: <b>{data['position']}</b>\n"
                    text_to_send += f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä –í—ã –º–æ–∂–µ—Ç–µ –≤ —Å–µ—Ä–≤–∏—Å–µ {WBCON_WB_PLACE_LINK}"

                    await bot.send_message(user_id, text = text_to_send, parse_mode="HTML", disable_web_page_preview=True)
                    SQL().set_user_got_1(task_id, user_id)
                    
                except KeyError:
                    await bot.send_message(user_id, text = f"–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ, –≤–∏–¥–∏–º–æ, –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {article}, –Ω–µ—Ç –≤: https://www.wildberries.ru/catalog/0/search.aspx?search={category}", parse_mode="HTML", disable_web_page_preview=True)
                    parsing_count = SQL().get_parsing_left_count(user_id)
                    SQL().set_user_got_1(task_id, user_id)
                    SQL().update_parsing_left_count(user_id, parsing_count, -1)
                except Exception as e:
                    print(traceback.format_exc())
                    parsing_count = SQL().get_parsing_left_count(user_id)
                    SQL().set_user_got_1(task_id, user_id)
                    SQL().update_parsing_left_count(user_id, parsing_count, -1)
                    await bot.send_message(user_id, text = f"–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É: <b>{article}</b> –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏üòî –ù–æ –º—ã –≤–µ—Ä–Ω—É–ª–∏ —Ç–µ–±–µ –ø–æ–ø—ã—Ç–∫—É!", parse_mode="HTML", disable_web_page_preview=True)
            else:
                pass
            SQL().__exit__()
 
asyncio.run(main())