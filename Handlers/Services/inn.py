from os import name
from aiogram.types.message import Message
from aiogram.utils.markdown import text
from loader import bot, dp
import re
from aiogram import types
from MySQL import SQL
from reply_texts import WBCON_LINK
import json
from Handlers.catch_services import services_cb
from aiogram.utils.callback_data import CallbackData


@dp.callback_query_handler(services_cb.filter(action="inn"))
async def send_message(query: types.CallbackQuery, callback_data: dict):
    user_id = query.from_user.id
    SQL().set_sm_inn_1(user_id)
    await bot.edit_message_text("–û—Ç–ø—Ä–∞–≤—å –ò–ù–ù –∏–ª–∏ –û–ì–†–ù:", user_id, query.message.message_id)

async def inn_send_message(message: types.Message, message_text):
    user_id = message.from_user.id
    parsing_left_count = SQL().get_parsing_left_count(user_id)
    SQL().update_parsing_left_count(user_id, parsing_left_count, 1)
    if parsing_left_count > 0:
        try:
            await message.answer(f"–ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–∫–æ—Ä–æ –æ–Ω –ø—Ä–∏–¥—ë—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º(–ò–ù–ù –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏)\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {parsing_left_count - 1} –∏–∑ 200 –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å")
            data = SQL().POST_INN_REQUEST(message_text, user_id)
            text_to_send = f"<i>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message_text}</i>\n"
            for i in data:
                dat = data[i]
                if i == "name" and dat != '':
                    text_to_send += f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: <b>{dat}</b>" + "\n"
                elif i == "reg_date" and dat != '':
                    text_to_send += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{dat}</b>" + "\n"
                elif i == "full_name" and dat != '':
                    text_to_send += f"–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{dat}</b>" + "\n"
                elif i == "inn" and dat != '':
                    text_to_send += f"–ò–ù–ù: <b>{dat}</b>" + "\n"
                elif i == "kpp" and dat != '':
                    text_to_send += f"–ö–ü–ü: <b>{dat}</b>" + "\n"
                elif i == "ogrn" and dat != '':
                    text_to_send += f"–û–ì–†–ù: <b>{dat}</b>" + "\n"
                elif i == "ogrn_date" and dat != '':
                    text_to_send += f"–î–∞—Ç–∞ –û–ì–†–ù: <b>{dat}</b>" + "\n"
                elif i == "dolgnost" and dat != '':
                    text_to_send += f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{dat}</b>" + "\n"
                elif i == "director_name" and dat != '':
                    text_to_send += f"–§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: <b>{dat}</b>" + "\n"
                elif i == "director_time" and dat != '':
                    text_to_send += f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å –¥–∞—Ç—ã: <b>{dat}</b>" + "\n"
                elif i == "main_work" and dat != '':
                    text_to_send += f"–°—Ñ–µ—Ä–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: <b>{dat}</b>" + "\n"
                elif i == "main_okved" and dat != '':
                    text_to_send += f"–û—Å–Ω–æ–≤–Ω–æ–π –û–ö–í–≠–î: <b>{dat}</b>" + "\n"
                elif i == "average_number" and dat != '':
                    text_to_send += f"–°—Ä–µ–¥–Ω—è—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: <b>{dat}</b>" + "\n"
                elif i == "revenue" and dat != '':
                    text_to_send += f"–î–æ—Ö–æ–¥: <b>{dat}</b>" + "\n"
                elif i == "profit" and dat != '':
                    text_to_send += f"–ü—Ä–∏–±—ã–ª—å: <b>{dat}</b>" + "\n"
                elif i == "reliability" and dat != '':
                    text_to_send += f"–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å: <b>{dat}</b>" + "\n"
                elif i == "authorized_capital" and dat != '':
                    text_to_send += f"–£—Å—Ç–∞–≤–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª: <b>{dat}</b>" + "\n"
                elif i == "legal_adress" and dat != '':
                    text_to_send += f"–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å: <b>{dat}</b>" + "\n"
                elif i == "usn" and dat != '':
                    text_to_send += f"–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è: <b>{dat}</b>" + "\n"
                elif i == "msp" and dat != '':
                    text_to_send += f"–í—Ö–æ–¥–∏—Ç –ª–∏ –≤ —Ä–µ–µ—Å—Ç—Ä —Å—É–±—ä–µ–∫—Ç–æ–≤ –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ: <b>{dat}</b>" + "\n"
                elif i == "taxes" and dat != '':
                    text_to_send += f"–ù–∞–ª–æ–≥–∏: <b>{dat}</b>" + "\n"
                elif i == "contributions" and dat != '':
                    text_to_send += f"–í–∑–Ω–æ—Å—ã: <b>{dat}</b>" + "\n"
                elif i == "founders_" and dat != '':
                    text_to_send += f"–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏: <b>{dat}</b>" + "\n"
                elif i == "email" and dat != '':
                    text_to_send += f"EMAIL: <b>{dat}</b>" + "\n"
                elif i == "phones" and dat != '':
                    text_to_send += f"–¢–µ–ª–µ—Ñ–æ–Ω: <b>{dat}</b>" + "\n"
            await message.answer(text_to_send, parse_mode="HTML")
        except Exception as e:
            print(e)
            await message.answer(f"–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏üòî –ù–æ –º—ã –≤–µ—Ä–Ω—É–ª–∏ —Ç–µ–±–µ –ø–æ–ø—ã—Ç–∫—É!", parse_mode="HTML")
            parsing_left_count = SQL().get_parsing_left_count(user_id)
            SQL().update_parsing_left_count(user_id, parsing_left_count, -1)
    else:
        await message.answer(f"–ò–∑–≤–∏–Ω–∏, –Ω–æ —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏üòî –°–æ–≤–µ—Ç—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç <b>{WBCON_LINK}</b>, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–∞—Ä—Å–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–æ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –±—Ä–µ–Ω–¥—ã –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤!\nhttps://wbcon.ru/parser-ozon/",
                                    parse_mode="HTML")