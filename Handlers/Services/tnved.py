from aiogram.types.message import Message
from loader import bot, dp
import re
from aiogram import types
from MySQL import SQL
from reply_texts import WBCON_LINK
import json
from Handlers.catch_services import services_cb
from aiogram.utils.callback_data import CallbackData


parsing_cb_ali = CallbackData('parsing_tnved', 'action')

@dp.callback_query_handler(services_cb.filter(action="tnved"))
async def send_message(query: types.CallbackQuery, callback_data: dict):
    user_id = query.from_user.id
    SQL().set_sm_tnved_1(user_id)
    await bot.edit_message_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞(–Ω–∞–ø—Ä–∏–º–µ—Ä \"–ú–∞–π–∫–∞\")", user_id, query.message.message_id)


async def tnved_send_message(message: types.Message, message_text):
    user_id = message.from_user.id
    parsing_left_count = SQL().get_parsing_left_count(user_id)
    if parsing_left_count > 0:
        await message.answer(f"–ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–∫–æ—Ä–æ –æ–Ω –ø—Ä–∏–¥—ë—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º(–¢–ù–í–≠–î –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏)\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {parsing_left_count - 1} –∏–∑ 200 –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å")
        try:
            text_to_send = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{message_text}</b>"

            SQL().update_parsing_left_count(user_id, parsing_left_count, amount=1)
            data = SQL().POST_TNVED_REQUEST(message_text, user_id)
            for dat in data:
                prob = int(dat["probability"])
                if prob > 2:
                    text_to_send += f"""
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ %: <b>{int(prob)}</b>

–ö–æ–¥ –¢–ù–í–≠–î: <b>{dat["code"]}</b>

–û–ø–∏—Å–∞–Ω–∏–µ: <b>{dat["description"]}</b>

–ù–î–°: <b>{dat["nds"]}</b>

<i>–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{parsing_left_count - 1}</b></i>
        """
                    await message.answer(str(text_to_send), parse_mode="HTML")
                    text_to_send = ""
            if text_to_send != "":
                await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¢–ù –í–≠–î")
                parsing_left_count = SQL().get_parsing_left_count(user_id)
                SQL().update_parsing_left_count(user_id, parsing_left_count, -1)
        except Exception as e:
            print(e)
            await message.answer(f"–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏üòî –ù–æ –º—ã –≤–µ—Ä–Ω—É–ª–∏ —Ç–µ–±–µ –ø–æ–ø—ã—Ç–∫—É!", parse_mode="HTML")
            parsing_left_count = SQL().get_parsing_left_count(user_id)
            SQL().update_parsing_left_count(user_id, parsing_left_count, -1)
    else:
        await message.answer(f"–ò–∑–≤–∏–Ω–∏, –Ω–æ —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏üòî –°–æ–≤–µ—Ç—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç <b>{WBCON_LINK}</b>, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–∞—Ä—Å–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–æ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –±—Ä–µ–Ω–¥—ã –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤!\nhttps://wbcon.ru/parser-ozon/",
                                    parse_mode="HTML")