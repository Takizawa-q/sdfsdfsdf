from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types.inline_keyboard import InlineKeyboardButton
from loader import dp, bot
from aiogram.utils.callback_data import CallbackData
import json
class LimitState(StatesGroup):
    storage = State()
    type_send = State()
    limit = State()

cb_data = CallbackData("types", "action")

@dp.message_handler(lambda message: message.text == "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Å–∫–ª–∞–¥–æ–≤ WBüü£", state=None)
async def send_message(message: types.Message):
    kb = InlineKeyboardMarkup().row(
        InlineKeyboardButton(
            "–ü–æ–¥–æ–ª—å—Å–∫", callback_data=cb_data.new(action="Podolsk"))
    ).row(InlineKeyboardButton("–ö–æ–ª–µ–¥–∏–Ω–æ", callback_data=cb_data.new(action="Koledino"))).row(
        InlineKeyboardButton(
            "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å", callback_data=cb_data.new(action="Elektro"))
    ).row(InlineKeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å –ö–ë–¢", callback_data=cb_data.new(action="ElektroKBT"))).row(
        InlineKeyboardButton(
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data=cb_data.new(action="Piter"))
    ).row(InlineKeyboardButton("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", callback_data=cb_data.new(action="Ekat"))).row(
        InlineKeyboardButton(
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", callback_data=cb_data.new(action="Novosib"))
    ).row(InlineKeyboardButton("–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", callback_data=cb_data.new(action="Krasnodar"))).row(
        InlineKeyboardButton(
            "–•–∞–±–∞—Ä–æ–≤—Å–∫", callback_data=cb_data.new(action="Habarovsk"))
    ).row(InlineKeyboardButton("–ö–∞–∑–∞–Ω—å", callback_data=cb_data.new(action="Kazan")))
    await LimitState.storage.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:", reply_markup=kb)
    
@dp.callback_query_handler(cb_data.filter(action=["Podolsk", "Koledino", "Elektro", "ElektroKBT", "Piter", "Ekat", "Novosib", "Krasnodar", "Habarovsk", "Kazan"]))
async def send_message(query: types.CallbackQuery, callback_data: dict):
    dat = query.data
    stor_name = ""
    for val in json.loads(query.as_json())["message"]["reply_markup"]["inline_keyboard"]:
        val = val[0]
        if val["callback_data"] == dat:
            stor_name += val["text"]
    
    await bot.edit_message_text("123123")