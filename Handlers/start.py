from aiogram import types
from MySQL import SQL
import logging
from Buttons.button_combinations import MAIN_MENU_BUTTON
from reply_texts import WBCON_LINK
from loader import dp


logging.basicConfig(level=logging.INFO, filename="Logs/main.log", filemode="a",
            format="%(levelname)s:%(asctime)s:%(message)s")

@dp.message_handler(lambda message: message.text == "/start")
async def send_welcome_message(message: types.Message):
    user_username = message.from_user.username
    user_first_name = message.from_user.first_name
    user_id = SQL().find_user_in_table(message.from_user.id)
    
    if not user_id:
        try:
            SQL().create_user(message.from_user.id, user_username, user_first_name)
        except:
            SQL().create_user(message.from_user.id, "errorM", "errorM")
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {str(message.from_user.id)}, {user_username}")
        
    parsing_left_count = SQL().get_parsing_left_count(message.from_user.id)
    await message.answer(f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n    üÜî –í–∞—à id: {message.from_user.id}\n    üë§ –í–∞—à–µ –∏–º—è: {user_first_name}\n    ü§ñ –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: {user_username}\n    üíª–ü–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {parsing_left_count}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")

    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram –±–æ—Ç–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã üü£{WBCON_LINK}üü£!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –ú–ü –Ω–∏–∂–µ‚¨áÔ∏è",
                         reply_markup=MAIN_MENU_BUTTON,
                         parse_mode="HTML",
                         disable_web_page_preview=True)