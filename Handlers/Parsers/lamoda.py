from ast import parse
from aiogram.dispatcher import storage
from aiogram.types.message import Message
from aiogram.utils.markdown import text
from loader import bot, dp
import re
from aiogram import types
from MySQL import SQL
from reply_texts import WBCON_LINK
import json
from aiogram.utils.callback_data import CallbackData

async def lamoda_send_message(message: types.Message):
    message_text = message.text
    if not message_text.startswith("https://"):
        message_text = f"https://www.lamoda.ru/p/{message.text}"
    user_id = message.from_user.id
    parsing_left_count = SQL().get_parsing_left_count(user_id)
    
    if parsing_left_count > 0:
        SQL().update_parsing_left_count(user_id, parsing_left_count, 1)
        await message.answer(f"–ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–∫–æ—Ä–æ –æ–Ω –ø—Ä–∏–¥—ë—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º(Lamoda –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏)\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {parsing_left_count - 1} –∏–∑ 200 –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å")
        try:
            ud = json.loads(SQL().POST_LAMODA_REQUEST(message_text, user_id))
            item_name = ud["item"]
            item_url = ud["item_url"]
            description = ud["description"]
            complectation = ud["complectation"]
            gender = ud["gender"]
            brand = ud["brand"]
            rating = ud["rating"]
            reviews_count = ud["reviews_count"]
            price_with_discount = ud["price"]
            price_withoud_discount = ud["old_price"]
            discount_percent = ud["discount"]
            discount_amount = ud["discount_lamoda"]
            color = ud["colors"]
            images = ud["images"]
            sizes = ud["sizes"].replace(",", " –µ–¥.,")
            if sizes:
                sizes += "–µ–¥."
            
            quantity = ud["all_quantities"]
            
            text_to_send = f"""–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: <i>{message_text}</i>
            –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{item_name}</b>
            –ë—Ä–µ–Ω–¥: <b>{brand}</b>
            –†–µ–π—Ç–∏–Ω–≥: <b>{rating}</b>
            –ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤: <b>{reviews_count}</b>
            –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: <b>{price_with_discount}</b>
            –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: <b>{price_withoud_discount}</b>
            –°–∫–∏–¥–∫–∞ –≤ %: <b>{discount_percent}</b>
            –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: <b>{discount_amount}</b>
            –¶–≤–µ—Ç: <b>{color}</b>
            –ü–æ–ª: <b>{gender}</b>
            –û–ø–∏—Å–∞–Ω–∏–µ: <b>{description}</b>
            –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: <b>{complectation}</b>
            
            –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <b>{images}</b>
            –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: <b>{item_url}</b>
            """
            storages_text_to_send = f"""
            <i>–ö–æ–ª-–≤–æ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º: <b>{sizes}</b></i>
<i>–û–±—â–µ–µ –∫–æ–ª-–≤–æ: <b>{quantity}</b></i>
            """
            await message.answer(str(text_to_send), parse_mode="HTML")
            await message.answer(str(storages_text_to_send), parse_mode="HTML")
        except Exception:
            await message.answer(f"–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏üòî –ù–æ –º—ã –≤–µ—Ä–Ω—É–ª–∏ —Ç–µ–±–µ –ø–æ–ø—ã—Ç–∫—É!", parse_mode="HTML")
            parsing_left_count = SQL().get_parsing_left_count(user_id)
            SQL().update_parsing_left_count(user_id, parsing_left_count, -1)
    else:
        await message.answer(f"–ò–∑–≤–∏–Ω–∏, –Ω–æ —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏üòî –°–æ–≤–µ—Ç—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç <b>{WBCON_LINK}</b>, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–∞—Ä—Å–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–æ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –±—Ä–µ–Ω–¥—ã –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤!\nhttps://wbcon.ru/parser-ozon/",
                                    parse_mode="HTML")
    

    
    
    