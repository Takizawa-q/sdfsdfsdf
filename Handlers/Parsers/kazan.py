from aiogram.types.message import Message
from loader import bot, dp
import re
from aiogram import types
from MySQL import SQL
from reply_texts import WBCON_LINK
import json
from aiogram.utils.callback_data import CallbackData


parsing_cb_ali = CallbackData('parsing_ali', 'action')

async def kazan_send_message(message: types.Message, message_text):
    user_id = message.from_user.id
    parsing_left_count = SQL().get_parsing_left_count(user_id)
    if parsing_left_count > 0:
        await message.answer(f"–ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–∫–æ—Ä–æ –æ–Ω –ø—Ä–∏–¥—ë—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º(Kazan –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏)\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {parsing_left_count - 1} –∏–∑ 200 –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å")
        try:
            print(message_text)
            SQL().update_parsing_left_count(user_id, parsing_left_count, amount=1)
            data = json.loads(SQL().POST_KAZAN_REQUEST(message_text, user_id))[1]
            print(data)
            if message_text.startswith("https://kazanexpress.ru/product"):
                product_link = message_text
            else:
                product_link = "https://kazanexpress.ru/product/" + str(message_text)
            photo_urls = data["photo_high_urls"]
            if "," in photo_urls:
                photo_url = photo_urls.split(",")[0]
            else:
                photo_url = photo_urls
            price_w_d = data["fullprice"]
            orders_count = data["ordersquantity"]
            text_to_send = f"""–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b><i>{message_text}</i></b>
    –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{data["item_name"]}</b>
    –ê—Ä—Ç–∏–∫—É–ª: <b>{data["item_id"]}</b>
    –ü—Ä–æ–¥–∞–≤–µ—Ü: <b>{data["seller"]}</b>
    –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: <b>{price_w_d}</b>
    –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: <b>{data["purchaseprice"]}</b>
    –†–µ–π—Ç–∏–Ω–≥: <b>{data["item_rating"]}</b>
    –û–ø–∏—Å–∞–Ω–∏–µ: <b>{data["description"]}</b>
    –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: <b>{data["attributes"]}</b>
    –ö–æ–ª-–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: <i><b>{data["available_amount"]}</b></i>
    –ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤: <i><b>{orders_count}</b></i>
    –í—ã–∫—É–ø–∏–ª–∏ –Ω–∞ —Å—É–º–º—É: <i><b>{int(int(price_w_d) * int(orders_count))}</b></i>
    –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: <b>{product_link}</b>
    –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: <b>{photo_url}</b>
    """

            await message.answer(str(text_to_send), parse_mode="HTML")
        except:
            await message.answer(f"–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏üòî –ù–æ –º—ã –≤–µ—Ä–Ω—É–ª–∏ —Ç–µ–±–µ –ø–æ–ø—ã—Ç–∫—É!", parse_mode="HTML")
            parsing_left_count = SQL().get_parsing_left_count(user_id)
            SQL().update_parsing_left_count(user_id, parsing_left_count, -1)
    else:
        await message.answer(f"–ò–∑–≤–∏–Ω–∏, –Ω–æ —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏üòî –°–æ–≤–µ—Ç—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç <b>{WBCON_LINK}</b>, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–∞—Ä—Å–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–æ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –±—Ä–µ–Ω–¥—ã –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤!\nhttps://wbcon.ru/parser-ozon/",
                                    parse_mode="HTML")