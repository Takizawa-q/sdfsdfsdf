from aiogram.types.message import Message
from loader import bot, dp
import re
from aiogram import types
from MySQL import SQL
from reply_texts import WBCON_LINK
from aiogram.utils.callback_data import CallbackData

parsing_cb_sber = CallbackData('parsing_sber', 'action')

async def sber_send_message(message: types.Message):
    user_id = message.from_user.id
    parsing_left_count = SQL().get_parsing_left_count(user_id)
    if parsing_left_count > 0:
        
        await message.answer(f"–ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–∫–æ—Ä–æ –æ–Ω –ø—Ä–∏–¥—ë—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º(Sber –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏)\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {parsing_left_count - 1} –∏–∑ 200 –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å")
        json_ = {"req_text": message.text, "user_id": user_id, "page_from": 1, "page_to": 1}
        SQL().update_parsing_left_count(user_id, parsing_left_count, amount=1)
        SQL().POST_SBER_REQUEST(user_id, message.text, json_=json_)
    else:
        await message.answer(f"–ò–∑–≤–∏–Ω–∏, –Ω–æ —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏üòî –°–æ–≤–µ—Ç—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç <b>{WBCON_LINK}</b>, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–∞—Ä—Å–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã, –Ω–æ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –±—Ä–µ–Ω–¥—ã –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤!\nhttps://wbcon.ru/parser-ozon/",
                                    parse_mode="HTML")

# @dp.callback_query_handler(parsing_cb_ozon.filter(action='NoOzon'))
# async def send_message(query: types.CallbackQuery, callback_data: dict):
#     await bot.edit_message_text("–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –ê—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon:",
#                                 query.from_user.id,
#                                 query.message.message_id,
#                                 parse_mode="HTML"
#                                 )